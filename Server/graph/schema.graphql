# GRAPH SCHEMA


"Defines type of config value."
enum EnumConfigType {
  "Defines config type is boolean"
  BOOLEAN
  "Defines config type is short text box"
  TEXT
  "Defines config type is large text area"
  LARGE_TEXT
  "Defines config type is Date and time"
  DATETIME
  "Defines config type is number"
  NUMBER
  "Defines config type is selection of choices"
  SELECT
}


"config store for dynamic configs"
type Config {
  id: String
  name: String
  configType: EnumConfigType
  value: String
  selectOptions: [String]
  createdAt: String
  updatedAt: String
}

# node
type HealthCheck {
  isWorking: Boolean
}

type WithAuth {
  listConfig(criteria: String, limit: Int, offset: Int): [Config]
  getConfig(id: String!): Config
}

type MutateWithAuth {
  del: DeleteEntityMutation
  update: UpdateEntityMutation
  fabricate: FabricateEntityMutation
}

type DeleteEntityMutation {
  ###D START###
  ###D END###
  test: Boolean
}

type UpdateEntityMutation {
  updateConfig(
    id: String
    name: String
    configType: EnumConfigType
    value: String
    selectOptions: [String]
    createdAt: String
    updatedAt: String
    createdBy: String
    updatedBy: String
  ): Config
}

type KvPair {
  val: String
  key: String
}

type FabricateEntityMutation {

  createConfig(
    name: String
    configType: EnumConfigType
    value: String
    selectOptions: [String]
    createdAt: String
    updatedAt: String
    createdBy: String
    updatedBy: String
  ): Config
}

type User {
  _id: ID!
  name:String!
  email: String!
  password: String
}

type TaskList {
    _id: ID!
    name: String!
    tasks: [String]!
  }


type Task{
  _id:ID!
  name:String!
  assignedTo:String
  listId:ID!
}

type List{
  _id:ID!
  name:String!
  tasks:[Task]
}

type Board{
  _id: ID!
  name:String
  lists:[List]
}

input UserInput {
  name:String
  email: String!
  password: String!
}

type Query {
  constant(value: String!): String
  withAuth(token: String!): WithAuth
  health: HealthCheck
  user(email:String): User
  Tasks:[Task!]!
  Task(task_id:String):Task
  Lists:[List!]!
  List(list_id:String):List
  Boards:Board
  Board(board_id:String): Board
  loginUser(userInput:UserInput):User
  enumOptions(name: String!): [KvPair]
  getTaskLists: [TaskList]!
}

type Mutation {
  mutationWithAuth(token: String!): MutateWithAuth
  createUser(userInput: UserInput): User
  createBoard(name:String): Board
  createList(name:String,board_id:ID!): List
  createTask(name:String,assignedTo:String,list_id:ID!): Task
   addBoard(boardName: String!): TaskList
  addTaskToList(listId: ID!, task: String!): TaskList
}

input KvPairInput {
  val: String
  key: String
}


